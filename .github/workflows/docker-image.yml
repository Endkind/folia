name: Docker Image CI

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Extract version from tag (remove 'v')
      id: get_version
      run: |
        VERSION=${GITHUB_REF##*/}
        VERSION=$(echo $VERSION | sed 's/^v//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build the Docker image
      run: docker build --build-arg FOLIA_VERSION=$VERSION -t endkind/folia:$VERSION .

    - name: Save Docker image for test job
      run: docker save endkind/folia:$VERSION > image.tar

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Extract version from tag (remove 'v')
      id: get_version
      run: |
        VERSION=${GITHUB_REF##*/}
        VERSION=$(echo $VERSION | sed 's/^v//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Load Docker image
      run: docker load < image.tar

    - name: Test the Docker image
      run: |
        # Start the container
        CONTAINER_ID=$(docker run -it -d -p 25565:25565 -e MINECRAFT_EULA=true endkind/folia:$VERSION)

        # Install telnet on the host
        sudo apt-get update && sudo apt-get install -y telnet

        # Wait for the container to initialize and check the port from the host
        MAX_RETRIES=60
        RETRY_COUNT=0
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # Check if the container is running
          if [ "$(docker ps -q -f id=$CONTAINER_ID)" == "" ]; then
            echo "Container failed to start."
            exit 1
          fi

          # Check if port 25565 is open
          TELNET_STATUS=$(echo quit | telnet localhost 25565 | grep "Connected")
          if [ ! -z "$TELNET_STATUS" ]; then
            echo "Port 25565 is open and accessible from the host."
            break
          fi

          # Increment retry count and wait
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Waiting for container to initialize... ($RETRY_COUNT/$MAX_RETRIES)"
          sleep 5
        done

        # If the container still isn't ready, fail the job
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "Container did not initialize within the expected time."
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          exit 1
        fi

        # Clean up
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID

  push:
    runs-on: ubuntu-latest
    needs:
      - build
      - test

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Extract version from tag (remove 'v')
      id: get_version
      run: |
        VERSION=${GITHUB_REF##*/}
        VERSION=$(echo $VERSION | sed 's/^v//')
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Load Docker image
      run: docker load < image.tar

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push the Docker image
      run: docker push endkind/folia:$VERSION

  create-issue-on-failure:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
      - push
    if: failure()
    steps:
    - name: Create a GitHub Issue
      uses: actions/github-script@v6
      with:
        script: |
          const github_context = github; // Kontext-Objekt mit neuem Namen

          // Debug-Ausgabe für den Kontext
          console.log("Debugging GitHub context:", github_context);

          // Fallback-Werte prüfen und setzen
          const sha = github_context.sha || github_context.payload?.head_commit?.id || "unknown";
          const workflow = github_context.workflow || "unknown";
          const job = github_context.job || "unknown";
          const runId = github_context.runId || "unknown";
          const owner = github_context.repo?.owner || "unknown";
          const repo = github_context.repo?.repo || "unknown";

          const issueTitle = `❌ CI/CD Pipeline Failed`;
          const issueBody = `
          The CI/CD pipeline failed for the commit: \`${sha}\`.
          Please investigate the issue and resolve it.

          **Workflow:** ${workflow}
          **Job:** ${job}
          **Run ID:** ${runId}
          **Repository:** ${owner}/${repo}

          View the full logs [here](${github_context.serverUrl}/${owner}/${repo}/actions/runs/${runId}).
          `;

          const { data: issue } = await github.rest.issues.create({
            owner: owner,
            repo: repo,
            title: issueTitle,
            body: issueBody,
          });

          console.log(`Created issue #${issue.number}: ${issue.html_url}`);
